
// ==========================================================================
// Tools / Layout
// ==========================================================================

// Grid-like layout system.
//
// The layout tools provide a column-style layout system. This file contains
// the mixins to generate basic structural elements.
//
// @link https://github.com/inuitcss/inuitcss/blob/0420ba8/objects/_objects.layout.scss
//
//
// Generate the layout container.
//
// 1. Use the negative margin trick for multi-row grids:
//    http://csswizardry.com/2011/08/building-better-grid-systems/
//
// @requires {function} u-list-reset
// @output   `font-size`, `margin`, `padding`, `list-style`

@mixin layout($gutter: 0, $fix-whitespace: true) {
    margin: 0;
    padding: 0;
    list-style: none;

    @if ($fix-whitespace) {
        font-size: 0;
    }

    @if (type-of($gutter) == number) {
        margin-left: -$gutter; // [1]
    }
}

// Generate the layout item.
//
// 1. Required in order to combine fluid widths with fixed gutters.
// 2. Allows us to manipulate grids vertically, with text-level properties,
//    etc.
// 3. Default item alignment is with the tops of each other, like most
//    traditional grid/layout systems.
// 4. By default, all layout items are full-width (mobile first).
// 5. Gutters provided by left padding:
//    http://csswizardry.com/2011/08/building-better-grid-systems/

@mixin layout_item($gutter: 0, $fix-whitespace: true) {
    display: inline-block; // [2]
    width: 100%; // [4]
    vertical-align: top; // [3]

    @if ($fix-whitespace) {
        font-size: 1rem;
    }

    @if (type-of($gutter) == number) {
        padding-left: $gutter; // [5]
    }
}


// ==========================================================================
// Objects / Layout
// ==========================================================================

////
/// Grid-like layout system.
///
/// The layout object provides us with a column-style layout system. This file
/// contains the basic structural elements, but classes should be complemented
/// with width utilities, for example:
///
/// @example
///   <div class="o-layout">
///     <div class="o-layout_item  u-1/1  u-1/3@medium">
///     </div>
///     <div class="o-layout_item  u-1/2  u-1/3@medium">
///     </div>
///     <div class="o-layout_item  u-1/2  u-1/3@medium">
///     </div>
///   </div>
///
/// We can also manipulate entire layout systems by adding a series of modifiers
/// to the `.o-layout` block. For example:
///
/// @example
///   <div class="o-layout  -reverse">
///
/// This will reverse the displayed order of the system so that it runs in the
/// opposite order to our source, effectively flipping the system over.
///
/// @example
///   <div class="o-layout  -[right|center]">
///
/// This will cause the system to fill up from either the centre or the right
/// hand side. Default behaviour is to fill up the layout system from the left.
///
/// @requires tools/layout
/// @link https://github.com/inuitcss/inuitcss/blob/0420ba8/objects/_objects.layout.scss
////

.layout {
    @include layout;

    // Gutter modifiers
    &.-gutter {
        margin-left: map-get($gutter, desktop);

        @include media-breakpoint-down(medium) {
            margin-left: map-get($gutter, medium);
        }
    }

    // &.-gutter-small {
    //     margin-left: rem(-$unit-small);
    // }

    // Horizontal aligment modifiers
    &.-center {
        text-align: center;
    }

    &.-right {
        text-align: right;
    }

    &.-reverse {
        direction: rtl;

        &.-flex {
            flex-direction: row-reverse;
        }
    }

    &.-flex {
         display: flex;

         &.-top {
            align-items: flex-start;
         }
         &.-middle {
            align-items: center;
         }
         &.-bottom {
            align-items: flex-end;
         }
    }
    &.-stretch {
        align-items: stretch;
    }
}

.layout_item {
    @include layout_item;

    // Gutter modifiers
    .layout.-gutter > & {
        padding-left: map-get($gutter, medium);
    }

    // .layout.-gutter-small > & {
    //     padding-left: rem($unit-small);
    // }

    // Vertical alignment modifiers
    .layout.-middle > & {
        vertical-align: middle;
    }

    .layout.-bottom > & {
        vertical-align: bottom;
    }

    // Horizontal aligment modifiers
    .layout.-center > &,
    .layout.-right > &,
    .layout.-reverse > & {
        text-align: left;
    }

    .layout.-reverse > & {
        direction: ltr;
    }
}