@mixin make-row() {
    display: flex;
    margin-right: calc(-1 * $grid-gutter-width / 2);
    margin-left: calc(-1 *  $grid-gutter-width / 2);
    flex-wrap: wrap;
}

@mixin make-col-ready() {
    padding-right: calc($grid-gutter-width / 2);
    padding-left: calc($grid-gutter-width / 2);
    width: 100%;
    max-width: 100%;
    box-sizing:
        if(
            variable-exists(include-column-box-sizing) and $include-column-box-sizing,
            border-box,
            null
        );
    flex-shrink: 0;
}

@mixin make-col($size, $columns: $grid-columns) {
    flex: 0 0 auto;
    width: percentage(calc($size / $columns));
}

@mixin make-col-auto() {
    flex: 0 0 auto;
    width: auto;
}

@mixin make-col-offset($size, $columns: $grid-columns) {
    $num: calc($size / $columns);

    margin-left: if($num == 0, 0, percentage($num));
}

@mixin row-cols($count) {
    > * {
        flex: 0 0 auto;
        width: calc(100% / $count);
    }
}

@mixin make-grid-columns(
    $columns: $grid-columns,
    $breakpoints: $grid-breakpoints
) {
    @each $breakpoint in map-keys($breakpoints) {
        $infix: breakpoint-infix($breakpoint, $breakpoints);

        @include media-breakpoint-up($breakpoint, $breakpoints) {
            .col#{$infix} {
                flex: 1 0 0%;
            }

            .row-cols#{$infix}-auto > * {
                @include make-col-auto();
            }

            @if $grid-row-columns > 0 {
                @for $i from 1 through $grid-row-columns {
                    .row-cols#{$infix}-#{$i} {
                        @include row-cols($i);
                    }
                }
            }

            .col#{$infix}-auto {
                @include make-col-auto();
            }

            @if $columns > 0 {
                @for $i from 1 through $columns {
                    .col#{$infix}-#{$i} {
                        @include make-col($i, $columns);
                    }
                }

                @for $i from 0 through ($columns - 1) {
                    @if not($infix == '' and $i == 0) {
                        .offset#{$infix}-#{$i} {
                            @include make-col-offset($i, $columns);
                        }
                    }
                }
            }
        }
    }
}

@mixin grid-system() {
    .row {
        @include make-row();

        > * {
            @include make-col-ready();
        }
    }

    @include make-grid-columns();
}

@mixin set-col($size, $columns: $grid-columns, $addon-gutters) {
    flex: 0 0 auto;
    width: calc(#{$size} * ((#{map-get($container-max-widths, desktop)} - ((#{$columns} - 1) * #{$grid-gutter-width})) / #{$columns}) + ((#{$size} - 1) * #{$grid-gutter-width}) + (#{$addon-gutters} * #{$grid-gutter-width}));

    @media screen and (max-width: map-get($container-max-widths, desktop)) {
        width: calc(#{$size} * (((100vw - 2 * #{map-get($container-padding, tablet)}) - ((#{$columns} - 1) * #{$grid-gutter-width})) / #{$columns}) + ((#{$size} - 1) * #{$grid-gutter-width}) + (#{$addon-gutters} * #{$grid-gutter-width}));
    }

    @media screen and (max-width: map-get($grid-breakpoints, tablet)) {
        width: calc(#{$size} * (((100vw - 2 * #{map-get($container-padding, mobile)}) - ((#{$columns} - 1) * #{$grid-gutter-width})) / #{$columns}) + ((#{$size} - 1) * #{$grid-gutter-width}) + (#{$addon-gutters} * #{$grid-gutter-width}));
    }
}

@mixin set-col-offset($size, $columns: $grid-columns, $addon-gutters, $direction:'left') {
    @if ($direction == 'left') {
        margin-left: calc(#{$size} * ((#{map-get($container-max-widths, desktop)} - ((#{$columns} - 1) * #{$grid-gutter-width})) / #{$columns}) + ((#{$size} - 1) * #{$grid-gutter-width}) + (#{$addon-gutters} * #{$grid-gutter-width}));

        @media screen and (max-width: map-get($container-max-widths, desktop)) {
            margin-left: calc(#{$size} * (((100vw - 2 * #{map-get($container-padding, tablet)}) - ((#{$columns} - 1) * #{$grid-gutter-width})) / #{$columns}) + ((#{$size} - 1) * #{$grid-gutter-width}) + (#{$addon-gutters} * #{$grid-gutter-width}));
        }

        @media screen and (max-width: map-get($grid-breakpoints, tablet)) {
            margin-left: calc(#{$size} * (((100vw - 2 * #{map-get($container-padding, mobile)}) - ((#{$columns} - 1) * #{$grid-gutter-width})) / #{$columns}) + ((#{$size} - 1) * #{$grid-gutter-width}) + (#{$addon-gutters} * #{$grid-gutter-width}));
        }
    }

    @else {
        margin-right: calc(#{$size} * ((#{map-get($container-max-widths, desktop)} - ((#{$columns} - 1) * #{$grid-gutter-width})) / #{$columns}) + ((#{$size} - 1) * #{$grid-gutter-width}) + (#{$addon-gutters} * #{$grid-gutter-width}));

        @media screen and (max-width: map-get($container-max-widths, desktop)) {
            margin-right: calc(#{$size} * (((100vw - 2 * #{map-get($container-padding, tablet)}) - ((#{$columns} - 1) * #{$grid-gutter-width})) / #{$columns}) + ((#{$size} - 1) * #{$grid-gutter-width}) + (#{$addon-gutters} * #{$grid-gutter-width}));
        }

        @media screen and (max-width: map-get($grid-breakpoints, tablet)) {
            margin-right: calc(#{$size} * (((100vw - 2 * #{map-get($container-padding, mobile)}) - ((#{$columns} - 1) * #{$grid-gutter-width})) / #{$columns}) + ((#{$size} - 1) * #{$grid-gutter-width}) + (#{$addon-gutters} * #{$grid-gutter-width}));
        }
    }
}
